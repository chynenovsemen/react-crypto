{"version":3,"sources":["context/CryptoContext.js","reducers/cryptoReducer.js","reducers/types.js","components/CryptoTable.js","api/index.js","components/SearchInput.js","serviceWorker.js","index.js","App.js"],"names":["CryptoContext","createContext","cryptoReducer","state","action","type","cryptoList","payload","cryptoToDisplay","error","CryptoTable","useContext","dispatch","useState","isLoading","setIsLoading","column","direction","sortParams","setSortParams","useEffect","a","async","queryString","fetch","proxyUrl","cryptoResponse","json","cryptoJson","data","map","item","paylaod","fetchAssets","sortByStringValue","key","sortedData","sort","b","nameA","toLowerCase","nameB","reverse","sortByNumberValue","quote","USD","tableData","id","name","symbol","price","toFixed","volume_24h","percent_change_24h","spinner","Spinner","animation","role","className","up","icon","faChevronUp","down","faChevronDown","Table","bordered","variant","style","boxShadow","textAlign","onClick","colSpan","renderError","SearchInput","searchTag","setSearchTag","filter","asset","includes","InputGroup","size","borderRadius","Prepend","Text","faSearch","FormControl","aria-label","aria-describedby","onChange","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","useReducer","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1d4d77b.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const CryptoContext = createContext();","import { SET_CRYPTO_LIST, SET_CRYPTO_TO_DISPLAY, SET_ERROR } from './types'\n\nexport default function cryptoReducer(state, action) {\n  switch (action.type) {\n    case SET_CRYPTO_LIST:\n      return {\n        ...state,\n        cryptoList: action.payload\n      };\n    case SET_CRYPTO_TO_DISPLAY:\n      return {\n        ...state,\n        cryptoToDisplay: action.payload\n      };\n    // case SET_LOGOS:\n    // return {\n    //   ...state,\n    //   logos: action.payload\n    // };\n    case SET_ERROR:\n      return {\n      ...state,\n      error: action.error\n    };\n    default:\n      return state;\n  }\n}","export const SET_CRYPTO_LIST = 'SET_CRYPTO_LIST',\n             SET_CRYPTO_TO_DISPLAY = 'SET_CRYPTO_TO_DISPLAY',\n            //  SET_LOGOS = 'SET_LOGOS',\n             SET_ERROR = 'SET_ERROR';","import React, { useState, useEffect, useContext } from 'react';\nimport { Table, Spinner } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';\nimport { apiKey } from '../api';\nimport { CryptoContext } from '../context/CryptoContext';\nimport { SET_CRYPTO_LIST, SET_ERROR } from '../reducers/types';\n\n\nexport default function CryptoTable() {\n  const {state, dispatch} = useContext(CryptoContext);\n  const {cryptoList, cryptoToDisplay, error} = state;\n  const [isLoading, setIsLoading] = useState(true);\n  const [sortParams, setSortParams] = useState({column: null, direction: 'asc'});\n\n  useEffect(() => {\n    const fetchAssets = async () => {\n      const proxyUrl = `https://cors-anywhere.herokuapp.com/`,\n            cryptoUrl = `https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest`,\n            // logoUrl = `https://pro-api.coinmarketcap.com/v1/cryptocurrency/info`,\n            queryString = `?CMC_PRO_API_KEY=${apiKey}`;\n\n      try {\n        const cryptoResponse = await fetch(proxyUrl + cryptoUrl + queryString),\n              cryptoJson = await cryptoResponse.json();\n\n        // The fetch below should be modified to overcome response 429 about requests limit\n\n        // const logosResponse = await cryptoJson.data.map(async item => await fetch(proxyUrl + logoUrl + queryString + `&id=${item.id}`)),\n        //       logosJson = await logosResponse.json();\n\n        dispatch({type: SET_CRYPTO_LIST, payload: [...cryptoJson.data.map(item => item)]});\n        // dispatch({type: SET_LOGOS, payload: [...logosJson.data.map(item => item.logo)]});\n        setIsLoading(false);\n      } catch {\n        dispatch({type: SET_ERROR, paylaod: 'Oopsie! Something went wrong.'});\n      }\n    }\n\n    fetchAssets();\n  }, [dispatch]);\n\n  const renderError = () => {\n\t\tif (!error) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn <tr><td colSpan='6' className='error'>{error}</td></tr>;\n  }\n\n  const sortByStringValue = (key) => {\n    const direction = sortParams.direction === 'asc' ? 'desc' : 'asc';\n    const sortedData = [...cryptoList].sort((a, b) => {\n      const nameA = a[key].toLowerCase();\n      const nameB = b[key].toLowerCase();\n      return (nameA > nameB) ? -1 : (nameA < nameB) ? 1 : 0;\n    });\n    if (direction === 'desc') {\n      sortedData.reverse();\n    }\n    setSortParams({\n      column: key,\n      direction: direction,\n    });\n    dispatch({type: SET_CRYPTO_LIST, payload: sortedData});\n  }\n\n  const sortByNumberValue = (key) => {\n    const direction = sortParams.column ? (sortParams.direction === 'asc' ? 'desc' : 'asc') : 'desc';\n    const sortedData = [...cryptoList].sort((a, b) => (a.quote.USD[key] > b.quote.USD[key]) ? -1 : (b.quote.USD[key] > a.quote.USD[key]) ? 1 : 0);\n    if (direction === 'desc') {\n      sortedData.reverse();\n    }\n    setSortParams({\n      column: key,\n      direction: direction,\n    });\n    dispatch({type: SET_CRYPTO_LIST, payload: sortedData});\n  }\n\n  const tableData = cryptoToDisplay.map(item => (\n    <tr key={item.id}>\n      {/* <td>{item.id}</td> */}\n      <td>{item.name}</td>\n      <td>{item.symbol}</td>\n      <td>${item.quote.USD.price.toFixed(2)}</td>\n      <td>${item.quote.USD.volume_24h.toFixed(2)}</td>\n      <td>{item.quote.USD.percent_change_24h.toFixed(2)}%</td>\n    </tr>\n  ));\n\n  const spinner = <Spinner animation='border' role='status'><span className='sr-only'>Loading...</span></Spinner>;\n\n  const up = <FontAwesomeIcon icon={faChevronUp} />;\n\n  const down = <FontAwesomeIcon icon={faChevronDown} />;\n\n  const tableStyles = {\n    boxShadow: '0 0 50px rgba(0,0,0,.9)',\n  };\n\n  const headerStyles = {\n    textAlign: 'center',\n  };\n\n  return (\n    <>\n      <Table bordered variant='dark' style={tableStyles}>\n        <thead style={headerStyles}>\n          <tr>\n\n          {/* logo to be done here */}\n\n          {/* <th>Logo</th> */}\n\n          {/* logo to be done here */}\n\n          <th onClick={() => sortByStringValue('name')}>\n            Name &nbsp;\n            {(sortParams.column === 'name' && sortParams.direction === 'asc') ? down : (sortParams.column === 'name' && sortParams.direction === 'desc') ? up : null}\n          </th>\n          <th onClick={() => sortByStringValue('symbol')}>\n            Symbol &nbsp;\n            {(sortParams.column === 'symbol' && sortParams.direction === 'asc') ? down : (sortParams.column === 'symbol' && sortParams.direction === 'desc') ? up : null}\n          </th>\n          <th onClick={() => sortByNumberValue('price')}>\n            Price, USD &nbsp;\n            {(sortParams.column === 'price' && sortParams.direction === 'asc') ? down : (sortParams.column === 'price' && sortParams.direction === 'desc') ? up : null}\n          </th>\n          <th onClick={() => sortByNumberValue('volume_24h')}>\n            Volume/24h &nbsp;\n            {(sortParams.column === 'volume_24h' && sortParams.direction === 'asc') ? down : (sortParams.column === 'volume_24h' && sortParams.direction === 'desc') ? up : null}\n          </th>\n          <th onClick={() => sortByNumberValue('percent_change_24h')}>\n            %/24h &nbsp;\n            {(sortParams.column === 'percent_change_24h' && sortParams.direction === 'asc') ? down : (sortParams.column === 'percent_change_24h' && sortParams.direction === 'desc') ? up : null}\n          </th>\n          </tr>\n        </thead>\n        <tbody>\n          {!isLoading ? tableData : null}\n          {renderError()}\n        </tbody>\n      </Table>\n      {isLoading ? spinner : null}\n    </>\n  )\n}","export const apiKey = 'ec3f2cbd-e15f-4669-bf54-79169c2f9898';\n","import React, { useState, useEffect, useContext } from 'react';\nimport { InputGroup, FormControl } from 'react-bootstrap';\nimport { CryptoContext } from '../context/CryptoContext';\nimport { SET_CRYPTO_TO_DISPLAY } from '../reducers/types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nexport default function SearchInput() {\n  const {state, dispatch} = useContext(CryptoContext);\n  const {cryptoList} = state;\n  const [searchTag, setSearchTag] = useState('');\n\n  useEffect(() => {\n    const cryptoToDisplay = cryptoList.filter(asset => asset.name.toLowerCase().includes(searchTag));\n    dispatch({type: SET_CRYPTO_TO_DISPLAY, payload: [...cryptoToDisplay]});\n  }, [searchTag, cryptoList, dispatch]);\n\n  const inputStyles = {\n    boxShadow: '0 0 50px rgba(0,0,0,.7)',\n    borderRadius: '5px'\n  };\n\n  return (\n    <div>\n      <InputGroup size='lg' className='mb-3' style={inputStyles}>\n        <InputGroup.Prepend>\n          <InputGroup.Text>Search &nbsp;<FontAwesomeIcon icon={faSearch} /></InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl aria-label='Large' aria-describedby='inputGroup-sizing-lg' onChange={e => setSearchTag(e.target.value.toLowerCase())} />\n      </InputGroup>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useReducer } from 'react';\nimport { CryptoContext } from './context/CryptoContext';\nimport cryptoReducer from './reducers/cryptoReducer';\nimport CryptoTable from './components/CryptoTable';\nimport SearchInput from './components/SearchInput';\n\nexport default function App() {\n  const initialState = {\n    cryptoList: [],\n    cryptoToDisplay: [],\n    // logos: [],\n    error: '',\n  };\n\n  const [state, dispatch] = useReducer(cryptoReducer, initialState);\n\n  return (\n    <CryptoContext.Provider value={{state, dispatch}}>\n      <div className='container'>\n        <SearchInput />\n        <CryptoTable />\n      </div>\n    </CryptoContext.Provider>\n  );\n}\n"],"sourceRoot":""}